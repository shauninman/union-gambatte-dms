# OPTIONAL DEFINES:
# -DROM_BROWSER: Enables internal rom browser (gb and gbc romdirs are hardcoded for each system)
# -DPOWEROFF: Replaces the "Quit" option with a "Power Off" option.

target = ARGUMENTS.get('target', 0)
if target == 'gcw0':
    include_path = ' -I/opt/gcw0-toolchain/usr/mipsel-gcw0-linux-uclibc/sysroot/usr/include'
    bin_path = '/opt/gcw0-toolchain/usr/bin/mipsel-linux-'
    sdl_path = '/opt/gcw0-toolchain/usr/mipsel-gcw0-linux-uclibc/sysroot/usr/bin/'
    version_defines = ' -DVERSION_GCW0'
    extra_cflags = ''
    print("Building Gambatte SDL with GCW0 toolchain...")
elif target == 'rs90':
    include_path = ' -I/opt/rs90-toolchain/mipsel-rs90-linux-musl/sysroot/usr/include'
    bin_path = '/opt/rs90-toolchain/usr/bin/mipsel-linux-'
    sdl_path = '/opt/rs90-toolchain/usr/mipsel-rs90-linux-musl/sysroot/usr/bin/'
    version_defines = ' -DVERSION_RS90'
    extra_cflags = ' -Ofast -fdata-sections -fno-common -fno-PIC -flto'
    print("Building Gambatte SDL with RS90 toolchain...")
elif target == 'retrofw':
    include_path = ' -I/opt/rs97-toolchain/mipsel-buildroot-linux-uclibc/sysroot/usr/include'
    bin_path = '/opt/rs97-toolchain/bin/mipsel-linux-'
    sdl_path = '/opt/rs97-toolchain/mipsel-buildroot-linux-uclibc/sysroot/usr/bin/'
    version_defines = ' -DVERSION_RETROFW'
    extra_cflags = ' -Ofast -fdata-sections -mno-fp-exceptions -mno-check-zero-division -mframe-header-opt -fno-common -mips32 -fno-PIC -mno-abicalls -flto -fwhole-program'
    print("Building Gambatte SDL with RetroFW toolchain...")
elif target == 'miyoomini':
    include_path = ' -I/opt/miyoomini-toolchain/usr/arm-linux-gnueabihf/sysroot/usr/include'
    bin_path = '/opt/miyoomini-toolchain/usr/bin/arm-linux-gnueabihf-'
    sdl_path = '/opt/miyoomini-toolchain/usr/arm-linux-gnueabihf/sysroot/usr/bin/'
    version_defines = ' -DVERSION_MIYOOMINI'
    extra_cflags = ' -marm -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard -march=armv7ve -Ofast -fdata-sections -fno-common -fPIC -flto -fwhole-program'
    print("Building Gambatte SDL with Miyoo Mini toolchain...")
else:
    include_path = ''
    bin_path = ''
    sdl_path = ''
    version_defines = ''
    extra_cflags = ''
    print("Building Gambatte SDL with...um, Linux?")

global_cflags = ARGUMENTS.get('CFLAGS', '-Wall -Wextra -O2 -fomit-frame-pointer -ffunction-sections -ffast-math -fsingle-precision-constant -g0' + extra_cflags + include_path)
global_cxxflags = ARGUMENTS.get('CXXFLAGS', global_cflags + ' -fno-exceptions -fno-rtti')
global_linkflags = ARGUMENTS.get('LINKFLAGS', '-Wl,--gc-sections')
global_defines = ' -DHAVE_STDINT_H' + version_defines

vars = Variables()
vars.Add('CC')
vars.Add('CXX')

env = Environment(CPPPATH = ['src', '../libgambatte/include', '../common'],
                  CFLAGS = global_cflags + global_defines,
                  CXXFLAGS = global_cxxflags + global_defines,
                  CC = bin_path + 'gcc',
                  CXX = bin_path + 'g++',
                  LINKFLAGS = global_linkflags + ' -lSDL_image -lSDL_mixer' + ' -lSDL_ttf -lSDL_image -ldl -lrt',
                  variables = vars)

env.ParseConfig(sdl_path + 'sdl-config --cflags --libs')

sourceFiles = Split('''
			src/audiosink.cpp
			src/blitterwrapper.cpp
			src/parser.cpp
			src/sdlblitter.cpp
			src/str_to_sdlkey.cpp
			src/usec.cpp
			SFont.c
			menu.cpp
			libmenu.cpp
			scaler.c
			../common/adaptivesleep.cpp
			../common/resample/src/chainresampler.cpp
			../common/resample/src/i0.cpp
			../common/resample/src/kaiser50sinc.cpp
			../common/resample/src/kaiser70sinc.cpp
			../common/resample/src/makesinckernel.cpp
			../common/resample/src/resamplerinfo.cpp
			../common/resample/src/u48div.cpp
			../common/rateest.cpp
			../common/skipsched.cpp
			../common/videolink/rgb32conv.cpp
			../common/videolink/vfilterinfo.cpp
			../libgambatte/libgambatte.a
		   ''')

conf = env.Configure()
conf.CheckLib('z')
conf.Finish()

version_str_def = [ 'GAMBATTE_SDL_VERSION_STR', r'\"r572u4\"' ]

env.Program('gambatte_sdl',
            [env.Object('src/gambatte_sdl.cpp',
                        CPPDEFINES = env['CPPDEFINES'] + [version_str_def])]
            + sourceFiles)
