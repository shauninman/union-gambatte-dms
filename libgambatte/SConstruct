# OPTIONAL DEFINES:
# -DROM_BROWSER: Enables internal rom browser (gb and gbc romdirs are hardcoded for each system)
# -DPOWEROFF: Replaces the "Quit" option with a "Power Off" option.

target = ARGUMENTS.get('target', 0)
if target == 'gcw0':
    include_path = ' -I/opt/gcw0-toolchain/usr/mipsel-gcw0-linux-uclibc/sysroot/usr/include'
    bin_path = '/opt/gcw0-toolchain/usr/bin/mipsel-linux-'
    version_defines = ' -DVERSION_GCW0'
    extra_cflags = ''
    print("Building Gambatte library with GCW0 toolchain...")
elif target == 'rs90':
    include_path = ' -I/opt/rs90-toolchain/mipsel-rs90-linux-musl/sysroot/usr/include'
    bin_path = '/opt/rs90-toolchain/usr/bin/mipsel-linux-'
    version_defines = ' -DVERSION_RS90'
    extra_cflags = ' -Ofast -fdata-sections -fno-common -fno-PIC -flto'
    print("Building Gambatte library with RS90 toolchain...")
elif target == 'retrofw':
    include_path = ' -I/opt/rs97-toolchain/mipsel-buildroot-linux-uclibc/sysroot/usr/include'
    bin_path = '/opt/rs97-toolchain/bin/mipsel-linux-'
    version_defines = ' -DVERSION_RETROFW'
    extra_cflags = ' -Ofast -fdata-sections -mno-fp-exceptions -mno-check-zero-division -mframe-header-opt -fno-common -mips32 -fno-PIC -mno-abicalls -flto -fwhole-program'
    print("Building Gambatte library with RetroFW toolchain...")
elif target == 'miyoomini':
    include_path = ' -I/opt/miyoomini-toolchain/usr/arm-linux-gnueabihf/sysroot/usr/include'
    bin_path = '/opt/miyoomini-toolchain/usr/bin/arm-linux-gnueabihf-'
    version_defines = ' -DVERSION_MIYOOMINI'
    extra_cflags = ' -marm -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard -march=armv7ve -Ofast -fdata-sections -fno-common -fPIC -flto -fwhole-program'
    print("Building Gambatte library with Miyoo Mini toolchain...")
else:
    include_path = ''
    bin_path = ''
    version_defines = ''
    extra_cflags = ''
    print("Building Gambatte library with...um, Linux?")

global_cflags = ARGUMENTS.get('CFLAGS', '-Wall -Wextra -O2 -fomit-frame-pointer -ffunction-sections -ffast-math -fsingle-precision-constant -g0' + extra_cflags + include_path)
global_cxxflags = ARGUMENTS.get('CXXFLAGS', global_cflags + ' -fno-exceptions -fno-rtti')
global_linkflags = ARGUMENTS.get('LINKFLAGS', '-Wl,--gc-sections')
global_defines = ' -DHAVE_STDINT_H' + version_defines
vars = Variables()
vars.Add('CC')
vars.Add('CXX')

env = Environment(CPPPATH = ['src', 'include', '../common'],
                  CFLAGS = global_cflags + global_defines,
                  CXXFLAGS = global_cxxflags + global_defines,
                  LINKFLAGS = global_linkflags,
                  variables = vars,
                  CC = bin_path + 'gcc',
                  CXX = bin_path + 'g++'                  
                  )

sourceFiles = Split('''
			src/bitmap_font.cpp
			src/bootloader.cpp
			src/cpu.cpp
			src/gambatte.cpp
			src/initstate.cpp
			src/interrupter.cpp
			src/interruptrequester.cpp
			src/loadres.cpp
			src/memory.cpp
			src/sound.cpp
			src/state_osd_elements.cpp
			src/statesaver.cpp
			src/tima.cpp
			src/video.cpp
			src/mem/cartridge.cpp
			src/mem/memptrs.cpp
			src/mem/pakinfo.cpp
			src/mem/rtc.cpp
			src/sound/channel1.cpp
			src/sound/channel2.cpp
			src/sound/channel3.cpp
			src/sound/channel4.cpp
			src/sound/duty_unit.cpp
			src/sound/envelope_unit.cpp
			src/sound/length_counter.cpp
			src/video/ly_counter.cpp
			src/video/lyc_irq.cpp
			src/video/next_m0_time.cpp
			src/video/ppu.cpp
			src/video/sprite_mapper.cpp
		   ''')

conf = env.Configure()

if conf.CheckHeader('zlib.h'):
	sourceFiles.append('src/file/unzip/unzip.c')
	sourceFiles.append('src/file/unzip/ioapi.c')
	sourceFiles.append('src/file/file_zip.cpp')
else:
	sourceFiles.append('src/file/file.cpp')

conf.Finish()

env.Library('gambatte', sourceFiles)
